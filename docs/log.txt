
http://localhost:4300/auth/sign-out
http://localhost:4300/auth/sign-in
http://localhost:4300/branch/aqua/menu
http://localhost:4300/staff/dashboard



Sync Fusion

  https://ej2.syncfusion.com/angular/documentation/schedule/getting-started
  ng add @syncfusion/ej2-angular-schedule

  https://ej2.syncfusion.com/angular/documentation/licensing/license-key-registration
  License key:  ORg4AjUWIQA/Gnt2UFhhQlJBfV5AQmBIYVp/TGpJfl96cVxMZVVBJAtUQF1hTX5VdkNjUXtXdHBSRWdf

  https://ej2.syncfusion.com/angular/documentation/schedule/localization#globalization





firebase target:apply hosting altea-pub-app altea-pub-app
firebase deploy --only hosting:altea-pub-app
Firebase:

  https://github.com/angular/angularfire/blob/HEAD/docs/auth.md#authentication


Error: browser kept refreshing in endless loop
--> was caused by same issue below

  ServiceWorkerModule.register('ngsw-worker.js', {
        enabled: !isDevMode(), 


Compression inside browser:

https://gist.github.com/Explosion-Scratch/357c2eebd8254f8ea5548b0e6ac7a61b

export const compress = async (
  str: string,
  encoding = 'gzip' as CompressionFormat
): Promise<ArrayBuffer> => {
  const byteArray = new TextEncoder().encode(str)
  const cs = new CompressionStream(encoding)
  const writer = cs.writable.getWriter()
  writer.write(byteArray)
  writer.close()
  return new Response(cs.readable).arrayBuffer()
}

export const decompress = async (
  byteArray: string[],
  encoding = 'gzip' as CompressionFormat
): Promise<string> => {
  const cs = new DecompressionStream(encoding)
  const writer = cs.writable.getWriter()
  writer.write(byteArray)
  writer.close()
  const arrayBuffer = await new Response(cs.readable).arrayBuffer()
  return new TextDecoder().decode(arrayBuffer)
}




Webpush

  https://blog.angular-university.io/angular-push-notifications/
  sudo npm install web-push -g


  web-push generate-vapid-keys --json

  { "publicKey":"BAerWF47sf38F0pwPyBSGzrL5sufyBAHY_Ol9ThbZubqfDewAfghj7SsOA26GEMmJ-IB7LIa0fE68sE0nZvAfbQ",
    "privateKey":"DGRWcQuw8AmsLa0urUgu2sp74tpsPjdKqfvVGOGcIrM"}

  Front end app: add a service worker
  https://blog.angular-university.io/angular-service-worker/
  ng add @angular/pwa --project altea-pub-app


  Error in browser:
    Could not subscribe to notifications Error: Service workers are disabled or not supported by this browser
    https://stackoverflow.com/questions/52513466/angular-6-service-workers-are-disabled-or-not-supported-error

              Just set the service worker to work in dev environment also in 'AppModule'

              ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production})
              To

              ServiceWorkerModule.register('ngsw-worker.js', { enabled: true})





NG0100: ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked.
Try to implement: https://gist.github.com/vades/a225170304f34f88a7a5d48bf4b1f58c



Stripe:

  CheckOut
    https://stripe.com/docs/checkout/quickstart
    https://stripe.com/docs/payments/checkout/how-checkout-works
    



Deploy:

  Followed procedure from this document:
  https://patricsteiner.github.io/multi-application-angular-project-with-ionic-and-firebase/

  => changed .firebaserc and firebase.json



Firebase setup (via Velzon):

https://themesbrand.com/velzon/docs/angular/social-setup.html





https://angular.io/guide/file-structure#setting-up-for-a-multi-project-workspace


ng new ng2-altea --no-create-application
ng generate library ts-common
ng generate library ts-altea-model
ng generate library ts-altea-logic
ng generate library ng-common
ng generate library ng-altea-common
ng generate application altea-velzon-admin


ng build ts-common
ng build ts-altea-model
ng build ts-altea-logic
ng build ng-common
ng build ng-altea-common
ng build altea-velzon-admin


tsconfig.json
=============

There are 2 ways to use external projects (when you work with local sources)

1/ Use the build output files (default) located in your dist directory

Disadvantage: you can not debug the source files of the other library

    "paths": {
        "other-lib": [
            "dist/other-lib"
        ]
    }

2/ Use the source files:
    Then you have to change the paths to

    "paths": {
        "other-lib": [
            "projects/other-lib/src/public-api.ts"
        ]
    }




    // "paths": {
    //   "ng-altea-common": [
    //     "dist/ng-altea-common"
    //   ],
    //   "ng-common": [
    //     "dist/ng-common"
    //   ],
    //   "ts-altea-logic": [
    //     "dist/ts-altea-logic"
    //   ],
    //   "ts-altea-model": [
    //     "dist/ts-altea-model"
    //   ],
    //   "ts-common": [
    //     "dist/ts-common"
    //   ]
    // },
    "paths": {
      "ng-altea-common": [
        "projects/ng-altea-common/src/public-api.ts"
      ],
      "ng-common": [
        "projects/ng-common/src/public-api.ts"
      ],
      "ts-altea-logic": [
        "projects/ts-altea-logic/src/public-api.ts"
      ],
      "ts-altea-model": [
        "projects/ts-altea-model/src/public-api.ts"
      ],
      "ts-common": [
        "projects/ts-common/src/public-api.ts"
      ]
    },

